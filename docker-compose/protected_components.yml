services:
  # Postgres service with TimescaleDB and PostGIS
  postgres:
    image: timescale/timescaledb-ha:pg14.6-ts2.8.1-latest
    volumes:
        - ./resources/db-init-scripts/postgres-protected-components.sql:/docker-entrypoint-initdb.d/postgres.sql
        - ./resources/db-init-scripts/hdb_catalog.sql:/docker-entrypoint-initdb.d/hdb_catalog.sql
    ports:
      - "5432:5432"
    command:
      - postgres
      - -c
      - timescaledb.telemetry_level=off
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"

  # PostgREST service
  postgrest:
    image: postgrest/postgrest:v10.0.0
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    environment:
      PGRST_DB_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      PGRST_DB_SCHEMA: test_scenario, graphql, public
      PGRST_JWT_SECRET: '{
        "keys": [
          {
            "kty": "RSA",
            "e": "AQAB",
            "use": "sig",
            "kid": "rsa1",
            "alg": "RS256",
            "n": "${AAC_JWK_MODULUS_N_CLAIM}"
          }
        ]
      }'

  # MinIO service
  minio:
    image: minio/minio:RELEASE.2022-11-26T22-43-32Z.fips
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_IDENTITY_OPENID_CONFIG_URL: "${AAC_INSTANCE}/.well-known/openid-configuration"
      MINIO_IDENTITY_OPENID_CLIENT_ID: "${MINIO_CLIENT_ID}"
      MINIO_IDENTITY_OPENID_CLIENT_SECRET: "${MINIO_CLIENT_SECRET}"
      MINIO_IDENTITY_OPENID_CLAIM_NAME: policy
      MINIO_IDENTITY_OPENID_SCOPES: openid
      MINIO_IDENTITY_OPENID_REDIRECT_URI: http://localhost:9001/oauth_callback
      MINIO_IDENTITY_OPENID_CLAIM_USERINFO: "on"
    command: server /data --console-address ":9001"

  # NiFi service
  nifi:
    image: ghcr.io/scc-digitalhub/nifi-oidc:0.1.1
    ports:
      - "8443:8443"
    volumes:
      - ./resources/postgresql-42.5.0.jar:/opt/nifi/nifi-current/lib/postgresql-42.5.0.jar
      - ./resources/certs:/opt/nifi/nifi-current/conf/certs
    environment:
      AUTH: oidc
      OIDC_CONFIGURATION: "${AAC_INSTANCE}/.well-known/openid-configuration"
      NIFI_CLIENT_ID: "${NIFI_CLIENT_ID}"
      NIFI_CLIENT_SECRET: "${NIFI_CLIENT_SECRET}"
      KEYSTORE_PATH: ./conf/certs/keystore.jks
      KEYSTORE_TYPE: jks
      KEYSTORE_PASSWORD: platform
      KEY_PASSWORD: platform
      TRUSTSTORE_PATH: ./conf/certs/truststore.jks
      TRUSTSTORE_TYPE: jks
      TRUSTSTORE_PASSWORD: platform
      INITIAL_ADMIN_IDENTITY: "${NIFI_INITIAL_ADMIN_IDENTITY}"

  # Dremio service
  #
  #
  #TODO
  #
  #

  # SQLPad service
  sqlpad:
    image: sqlpad/sqlpad:6.11.2 #last stable multiplatform version
    ports:
      - "4000:4000"
    environment:
      SQLPAD_PORT: 4000
      SQLPAD_ADMIN: "${SQLPAD_ADMIN}"
      SQLPAD_ADMIN_PASSWORD: "${SQLPAD_ADMIN_PASSWORD}"
      # Predefined connection to Postgres
      SQLPAD_CONNECTIONS__postgres1__name: Digitalhub
      SQLPAD_CONNECTIONS__postgres1__driver: postgres
      SQLPAD_CONNECTIONS__postgres1__host: postgres
      SQLPAD_CONNECTIONS__postgres1__port: 5432
      SQLPAD_CONNECTIONS__postgres1__database: "${POSTGRES_DB}"
      SQLPAD_CONNECTIONS__postgres1__username: "${POSTGRES_USER}"
      SQLPAD_CONNECTIONS__postgres1__password: "${POSTGRES_PASSWORD}"
      # OIDC configuration (OIDC users are assigned "editor" role)
      PUBLIC_URL: http://localhost:4000
      SQLPAD_OIDC_LINK_HTML: 'Sign in with AAC'
      SQLPAD_OIDC_CLIENT_ID: "${SQLPAD_OIDC_CLIENT_ID}"
      SQLPAD_OIDC_CLIENT_SECRET: "${SQLPAD_OIDC_CLIENT_SECRET}"
      SQLPAD_OIDC_SCOPE: 'openid profile email'
      SQLPAD_OIDC_ISSUER: "${AAC_INSTANCE}"
      SQLPAD_OIDC_AUTHORIZATION_URL: "${AAC_INSTANCE}/oauth/authorize"
      SQLPAD_OIDC_TOKEN_URL: "${AAC_INSTANCE}/oauth/token"
      SQLPAD_OIDC_USER_INFO_URL: "${AAC_INSTANCE}/userinfo"

      SQLPAD_ALLOWED_DOMAINS: "${SQLPAD_ALLOWED_DOMAINS}" #space delimited list of email domains to auto-add users after login
      SQLPAD_USERPASS_AUTH_DISABLED: 'true'
      SQLPAD_SESSION_COOKIE_SAME_SITE: Lax

  # Dagster services (Dagit and Daemon)
  # NOTE: these services are currently not protected
  dagit:
    image: ghcr.io/scc-digitalhub/dagster:0.1.0
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "5000"
      - -w
      - workspace.yaml
    ports:
      - "5000:5000"
    environment:
      # backend storage
      DAGSTER_POSTGRES_USER: "${POSTGRES_USER}"
      DAGSTER_POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      DAGSTER_POSTGRES_DB: dagster_storage
      DAGSTER_POSTGRES_PORT: 5432
      # credentials for the pipeline
      DH_DB_USERNAME: "${POSTGRES_USER}"
      DH_DB_PWD: "${POSTGRES_PASSWORD}"
      MINIO_ACCESS_KEY: "${MINIO_ROOT_USER}"
      MINIO_SECREY_KEY: "${MINIO_ROOT_PASSWORD}"
    volumes:
      - ./resources/dagster-pipelines:/opt/dagster/code
    depends_on:
      - postgres

  dagster_daemon:
    image: ghcr.io/scc-digitalhub/dagster:0.1.0
    entrypoint:
      - dagster-daemon
      - run
    restart: on-failure
    environment:
      # backend storage
      DAGSTER_POSTGRES_USER: "${POSTGRES_USER}"
      DAGSTER_POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      DAGSTER_POSTGRES_DB: dagster_storage
      DAGSTER_POSTGRES_PORT: 5432
      # credentials for the pipeline
      DH_DB_USERNAME: "${POSTGRES_USER}"
      DH_DB_PWD: "${POSTGRES_PASSWORD}"
      MINIO_ACCESS_KEY: "${MINIO_ROOT_USER}"
      MINIO_SECREY_KEY: "${MINIO_ROOT_PASSWORD}"
    volumes:
      - ./resources/dagster-pipelines:/opt/dagster/code
    depends_on:
      - postgres

  # Hasura service
  hasura:
    image: hasura/graphql-engine:v2.10.2.ubuntu
    restart: on-failure
    ports:
      - "3100:8080"
    depends_on:
      - postgres
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
      HASURA_GRAPHQL_JWT_SECRET: '{
       "jwk_url": "${AAC_INSTANCE}/jwk",
       "issuer": "${AAC_INSTANCE}",
       "audience": "${HASURA_AUDIENCE}"
      }'
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"

  # Grafana service
  grafana:
    image: grafana/grafana-oss #latest stable version
    ports:
      - "10000:10000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      GF_SERVER_HTTP_PORT: 10000
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "digital-hub-dremio"
      GF_INSTALL_PLUGINS: https://github.com/scc-digitalhub/grafana-dremio-datasource-plugin/raw/master/releases/digital-hub-dremio-1.0.0.zip;digital-hub-dremio
      # Generic OAuth2 authentication
      # See https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/
      GF_AUTH_GENERIC_OAUTH_ENABLED: 'true'
      GF_AUTH_GENERIC_OAUTH_NAME: AAC
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "${GRAFANA_CLIENT_ID}"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "${GRAFANA_CLIENT_SECRET}"
      GF_AUTH_GENERIC_OAUTH_SCOPES: 'openid email user.roles.me'
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "${AAC_INSTANCE}/oauth/authorize"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "${AAC_INSTANCE}/oauth/token"
      GF_AUTH_GENERIC_OAUTH_API_URL: "${AAC_INSTANCE}/userinfo"
      GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_NAME: email
      GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH: email
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: 'true'
      GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: 'true'
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: grafana_role
      
  redis:
    image: redis:latest
    restart: unless-stopped
    
  superset:
    image: ghcr.io/scc-digitalhub/superset-oidc:0.1.0
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    ports:
      - 8088:8088
    depends_on:
      - redis
      - postgres
    environment:
      DATABASE_DB: "${POSTGRES_DB}"
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: "${POSTGRES_PASSWORD}"
      DATABASE_USER: "${POSTGRES_USER}"
      DATABASE_PORT: 5432
      DATABASE_DIALECT: postgresql
      PYTHONPATH: /app/pythonpath:/app/docker/pythonpath_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FLASK_ENV: production
      SUPERSET_ENV: production
      CYPRESS_CONFIG: "false"
      AAC_INSTANCE: "${AAC_INSTANCE}"
      AAC_OPENID_CONFIGURATION_ENDPOINT: "${AAC_OPENID_CONFIGURATION_ENDPOINT}"
      AAC_USERINFO_ENDPOINT: "${AAC_USERINFO_ENDPOINT}"
      SUPERSET_CLIENT_ID: "${SUPERSET_CLIENT_ID}"
      SUPERSET_CLIENT_SECRET: "${SUPERSET_CLIENT_SECRET}"
      SUPERSET_ROLE_ADMIN: "${SUPERSET_ROLE_ADMIN}"
      SUPERSET_ROLE_ALPHA: "${SUPERSET_ROLE_ALPHA}"
      SUPERSET_ROLE_GAMMA: "${SUPERSET_ROLE_GAMMA}"
      SUPERSET_ROLE_GRANTER: "${SUPERSET_ROLE_GRANTER}"
      SUPERSET_ROLE_SQL_LAB: "${SUPERSET_ROLE_SQL_LAB}"

  superset-init:
    image: ghcr.io/scc-digitalhub/superset-oidc:0.1.0
    command: ["/app/docker/docker-init.sh"]
    user: "root"
    depends_on:
      - redis
      - postgres
    healthcheck:
      disable: true
    environment:
      DATABASE_DB: "${POSTGRES_DB}"
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: "${POSTGRES_PASSWORD}"
      DATABASE_USER: "${POSTGRES_USER}"
      DATABASE_PORT: 5432
      DATABASE_DIALECT: postgresql
      PYTHONPATH: /app/pythonpath:/app/docker/pythonpath_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES}"
      AAC_INSTANCE: "${AAC_INSTANCE}"
      AAC_OPENID_CONFIGURATION_ENDPOINT: "${AAC_OPENID_CONFIGURATION_ENDPOINT}"
      AAC_USERINFO_ENDPOINT: "${AAC_USERINFO_ENDPOINT}"
      SUPERSET_CLIENT_ID: "${SUPERSET_CLIENT_ID}"
      SUPERSET_CLIENT_SECRET: "${SUPERSET_CLIENT_SECRET}"
      SUPERSET_ROLE_ADMIN: "${SUPERSET_ROLE_ADMIN}"
      SUPERSET_ROLE_ALPHA: "${SUPERSET_ROLE_ALPHA}"
      SUPERSET_ROLE_GAMMA: "${SUPERSET_ROLE_GAMMA}"
      SUPERSET_ROLE_GRANTER: "${SUPERSET_ROLE_GRANTER}"
      SUPERSET_ROLE_SQL_LAB: "${SUPERSET_ROLE_SQL_LAB}"

volumes:
  grafana-storage:
    driver: local

# Default network with static subnet
networks:
  default:
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
