# Default values for core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/scc-digitalhub/digitalhub-core
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: core

podAnnotations: {}
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"
  # fsGroup: 2000

global:
  externalHostAddress: ""
  externalTls: false
  minio:
    digitalhubUserSecret: ""
  registry:
    url: ""
    secretName: ""
    username: ""
    password: ""
    email: ""

securityContext:
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"
  capabilities:
    drop:
    - ALL
  allowPrivilegeEscalation: false
  # runAsUser: 1000

minio:
  rootUser: minio
  rootPassword: minio123
  endpoint: "minio"
  endpointPort: "9000"
  bucket: "datalake"
  protocol: "http"
  awsDefaultRegion: ""
  awsRegion: ""
  # Change the publicUrl value to the one you are using for accessing the minio-API from your browser, in the form "http/s://yourminioapiurl"
  publicUrl: ""

service:
  port: "8080"
  type: ClusterIP
  httpNodePort: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: core.home
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false
# - name: template1
#   configMap:
#     name: template1

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
# - name: template1
#   mountPath: test/template1.json
#   subPath: template1.json

nodeSelector: {}

tolerations: []

affinity: {}

config:
  rootUser: ""
  rootPassword: ""

postgres:
  host: ""
  database: ""
  port: ""
  schema: ""

runtime:
  dbt:
    image: "ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-dbt/wrapper-dbt"
    tag: "0.11.0b7"
  kfp:
    image: "ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-kfp/wrapper-kfp"
    tag: "0.11.0b7"
  python:
    image: "ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime"
    tag3_9: "3.9-0.11.0b7"
    tag3_10: "3.10-0.11.0b7"
    tag3_11: "3.11-0.11.0b7"
  huggingFace:
    image: "kserve/huggingfaceserver"
    tag: "v0.14.0"

initImage:
  builderTool:
    image: "ghcr.io/scc-digitalhub/digitalhub-core-builder-tool"
    tag: "b95c095f"

authentication:
  basic:
    enabled: true
    username: ""
    password: ""
  openId:
    enabled: false
    issuerUri: ""
    jwtAudience: ""
    jwtClaim: ""
    oidcClientId: ""
    scope: ""
    externalSecret:
      name: ""
      key: ""
    jwtUsername: ""

events:
  enabled: "false"
  rabbitmq:
    enabled: false
    host: ""
    port: ""
    vhost: ""
    queue: ""
    topic: ""
    routingKey: ""
    credentials:
      username: ""
      password: ""
      existingSecret:
        name: ""
        usernameKey: ""
        passwordKey: ""

solr:
  enabled: false
  url: ""
  user: ""
  fullNameOverride: ""
  collection:
    name: ""
    initialize:
      enabled: true
      securityJsonSecret: ""
      image: smartcommunitylab/k8s-ansible:1.30.0-1.7.0-nonroot

corsOrigin: ""

registry:
  kaniko:
    imagePrefix: ""

keystore:
  existingSecret:
    secretName: ""
    keyName: ""
  keystoreKid: ""
  keystorePath: "/etc/keystore"

templates: []
  # - name: template1
  #   path: test/template1.json
  # - name: template2
  #   path: test/template2.json
  # - name: template3
  #   path: test/template3.json

coreAuthCreds:
  clientId: ""
  clientSecret: ""

kanikoArgs: ""

additionalConfig:
  debug:
    enableMetrics: false
    enableLogs: true
  security:
    disableRoot: true
  resources:
    cpuReq: ""
    cpuLim: ""
    memReq: ""
    memLim: ""
    pvcReq: ""
    pvcLim: ""
    gpuKey: ""
  service:
    type: "NodePort"
  job:
    deadline: "604800"
    jobSuspend: false

coreTokens:
  accessTokenDuration: "43200"
  refreshTokenDuration: "86400"

configmapAdditionalEnv: {}

argoWorkflow:
  configmap: artifact-repositories
  key: default-artifact-repository
  serviceAccount: default
  user: "1000"

sts:
  enabled: false
  replicaCount: 1

  image:
    repository: ghcr.io/scc-digitalhub/db-sts
    pullPolicy: IfNotPresent
    tag: "0.3.0"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: "core-sts"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"

  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
    capabilities:
      drop:
      - ALL
    allowPrivilegeEscalation: false

  service:
    type: ClusterIP
    port: 8080

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  postgres:
    connectionUrl: ""
    database: ""
    port: ""

  stsDb:
    database: ""
    platform: ""
    driver: ""

  stsCredsDuration: ""

  credentials:
    duration: ""
    minio:
      duration: ""
    db:
      duration: ""
    credentialRoles: ""
    clientId: ""
    clientSecret: ""
    jwtIssuerUri: "http://digitalhub-core:8080"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

  db:
    enabled: true
    claim: "db/role"
    role: ""
  minio:
    enabled: true
    claim: "minio/policy"
    policy: "readwritedigitalhub"

kubeai:
  enabled: true
  serviceName: ""
  port: ""

