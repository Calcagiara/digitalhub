global:
  cleanup:
    deployments: false
    statefulsets: false
    ingress: false
    pods: false
    jobs: false
    persistentVolumeClaims: false
  service:
    type: &serviceType "NodePort"
  crd:
    enabled: &globalCrd true
  registry:
    url: 192.168.49.2:30150
    username: ""
    password: ""
    email: ""
    secretName: ""
  basicAuth:
    enabled: false
    username: ""
    password: ""
    secretName: ""
  minio:
    rootUserSecret: minio
    rootUser: &minioRootUser minio
    rootPassword: &minioRootPassword minio123
    digitalhubUserSecret: digitalhub-minio-creds
    digitalhubUser: &digitalhubUser digitalhub
    digitalhubPassword: &digitalhubPassword digitalhub
    argoSecret: &argoSecret argo-minio-creds
    argoUser: &argoUser argo
    argoPassword: &argoPassword argo1234
    endpoint: &minioEndpoint "minio"
    endpointPort: &minioEndpointPort "9000"
    bucket: &minioBucket "datalake"
    argoBucket: &argoBucket "argo"
    protocol: &minioProtocol "http"
  solr:
    fullNameOverride: &solrFullNameOverride digitalhub
  externalHostAddress: &globalExternalUrl "192.168.49.2"
  externalTls: false
  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: "RuntimeDefault"

docker-registry:
  enabled: true
  fullnameOverride: digitalhub-docker-registry
  className: nginx
  service:
    type: *serviceType
    nodePort: 30150
  ingress:
    enabled: false
    path: /
    hosts:
      - registry.digitalhub.test
  persistence:
    accessMode: 'ReadWriteOnce'
    enabled: true
    size: 128Gi
  updateStrategy:
    type: Recreate
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
securityContext:
  enabled: true
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"

coder:
  enabled: true
  username: test
  password: Test12456@!
  email: test@digitalhub.test
  template:
    upgrade:
      enabled: false
      token: ""
    customTemplates:
      - name: jupyter
        nodePort: "30040"
        iconUrl: https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/1200px-Jupyter_logo.svg.png
        image: "ghcr.io/scc-digitalhub/jupyter-3-10:0.10.1"
        image39: "ghcr.io/scc-digitalhub/jupyter-3-9:0.10.1"
        image311: "ghcr.io/scc-digitalhub/jupyter-3-11:0.10.1"
        privileged: false
        stopAfter: 8h   # Sets the time after which the workspace will stop. (0 means the workspace deosn't stop)
      - name: code-toolbox-experimental
        nodePort: "30050"
        iconUrl: https://cdn-icons-png.flaticon.com/512/7301/7301969.png
        privileged: false
        stopAfter: 8h
        tolerations: []
      - name: dremio
        nodePort: "30120"
        iconUrl: https://cdn-images-1.medium.com/max/1200/1*2nGovT9tEnQva8NWfHLZxg.png
        image: "dremio/dremio-oss:24.1.0"
        stopAfter: 0h
      - name: sqlpad
        nodePort: "30140"
        iconUrl: https://i.ibb.co/TrBDsZM/sqlpad.png
        image: "smartcommunitylab/sqlpad:nonroot"
        stopAfter: 8h
      - name: grafana
        nodePort: "30130"
        iconUrl: https://cdn.iconscout.com/icon/free/png-256/free-grafana-logo-icon-download-in-svg-png-gif-file-formats--technology-social-media-company-vol-3-pack-logos-icons-3030088.png?f=webp
        image: "smartcommunitylab/grafana"
        stopAfter: 0h
  coder:
    image:
      tag: v2.19.1
    env:
      - name: CODER_TELEMETRY
        value: "false"
      - name: CODER_PG_USERNAME
        valueFrom:
          secretKeyRef:
            name: coder.coder-postgres-cluster.credentials.postgresql.acid.zalan.do
            key: username
      - name: CODER_PG_PASSWORD
        valueFrom:
          secretKeyRef:
            name: coder.coder-postgres-cluster.credentials.postgresql.acid.zalan.do
            key: password
      - name: CODER_PG_CONNECTION_URL
        value: "postgres://$(CODER_PG_USERNAME):$(CODER_PG_PASSWORD)@coder-postgres-cluster:5432/coder"
    ingress:
      enable: false
    service:
      type: *serviceType
      httpNodePort: "30170"
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

postgres-operator:
  enabled: true
  databases:
    digitalhub:
      enabled: true
      volume:
        size: 8Gi
      resources:
        requests:
          cpu: 512m
          memory: 1000Mi
        limits:
          cpu: "2"
          memory: 2Gi
    core:
      enabled: true
      volume:
        size: 8Gi
      resources:
        requests:
          cpu: 512m
          memory: 1000Mi
        limits:
          cpu: "2"
          memory: 2Gi
    coder:
      enabled: true
      volume:
        size: 8Gi
      resources:
        requests:
          cpu: 512m
          memory: 1000Mi
        limits:
          cpu: "2"
          memory: 2Gi
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

ext-postgres-operator:
  enabled: true
  postgres:
    host: database-postgres-cluster
    user: ""
    password: ""
    uri_args: " "
    cloud_provider: ""
    default_database: "postgres"
  postgresCredsExistingSecrets:
    username:
      secretName: "digitalhubadmin.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "username"
    password:
      secretName: "digitalhubadmin.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "password"
  podSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
  securityContext:
    seccompProfile:
      type: "RuntimeDefault"

postgrest-operator:
  enabled: true
  postgres:
    host: database-postgres-cluster
    port: 5432
    uri_args: "sslmode=disable"
    default_database: "digitalhub"
    postgrest_service_type: NodePort
  postgresCredsExistingSecrets:
    username:
      secretName: "digitalhub-owner-user.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "username"
    password:
      secretName: "digitalhub-owner-user.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "password"

core:
  enabled: true
  minio:
    endpoint: *minioEndpoint
    endpointPort: *minioEndpointPort
    bucket: *minioBucket
    protocol: *minioProtocol
    awsDefaultRegion: "us-west-1"
    awsRegion: "us-west-1"
    # Change the publicUrl value to the one you are using for accessing the minio-API from your browser, in the form "http/s://yourminioapiurl"
    publicUrl: "http://192.168.49.2:30080"
  service:
    type: *serviceType
    httpNodePort: "30180"
  postgres:
    host: database-postgres-cluster
    database: digitalhub
    port: "5432"
    schema: public
  config:
    rootUser: minio
    rootPassword: minio123
  authentication:
    openId:
      enabled: false
  events:
    enabled: false
    rabbitmq:
      enabled: false
      host: "digitalhub-rabbitmq"
      port: "5672"
      vhost: "/"
      queue: "dhCoreQueue"
      topic: "entityTopic"
      routingKey: "entityRoutingKey"
      credentials:
        existingSecret:
          name: "digitalhub-rabbitmq-default-user"
          usernameKey: "username"
          passwordKey: "password"
  solr:
    enabled: true
    url: "http://digitalhub-solrcloud-common/solr"
    user: user
    fullNameOverride: *solrFullNameOverride
    collection:
      name: "dhcore"
      initialize:
        enabled: true
        securityJsonSecret: digitalhub-solrcloud-security-bootstrap   # Name of the security.json secret
        image: smartcommunitylab/k8s-ansible:1.30.0-1.7.0-nonroot
  coreAuthCreds:  # These are example creds, change them to your needs.
    clientId: "m04bfbmd03m8sf4u9ucz54ti"
    clientSecret: "9rb5215z0aqd7fadzxuoyqe3"
  kanikoArgs: ""
  additionalConfig:  # Configuration of pods created by Core
    debug:
      enableMetrics: false  # Enable/disable metrics. Metrics server deployment is required.
      enableLogs: true  # Enable/disable logs
    security:
      disableRoot: true  # Enable/disable pods running as root
    resources:  # Set resources requests/limits
      cpuReq: "100m"
      cpuLim: ""
      memReq: "64m"
      memLim: ""
      gpuKey: "nvidia.com/gpu"
  argoWorkflow:
    configmap: artifact-repositories
    key: artifact-repository
    serviceAccount: argo-workflow
    user: "8877"
  sts:
    enabled: false
    clientId: &stsClientId "sjcqfiix79hx"
    clientSecret: &stsClientSecret "s7tznmn3q6nz"
    stsDb:
      database: sts
      platform: postgresql
      driver: org.postgresql.Driver
    db:
      enabled: true
      stsUser: *stsClientId
      stsPassword: *stsClientSecret
      role: "digitalhub_owner_user"
    minio:
      enabled: true
      claim: "minio/policy"
      policy: "readwritedigitalhub"
    postgres:
      connectionUrl: "jdbc:postgresql://database-postgres-cluster:5432/digitalhub"
      database: "digitalhub"
      port: "5432"
    credentials:
      duration: 86400   # Setting this value sets the time in seconds for the sts credentials, both for the db and minio. Set this to empty string if you wish to set them one by one below.
      credentialRoles: "digitalhub_owner_user"
      clientId: *stsClientId
      clientSecret: *stsClientSecret
      minio:
        duration: 86400
      db:
        duration: 86400
      jwtIssuerUri: ""   # Set this value to the endpoint of the issuer used in your environment

kubernetes-resource-manager:
  enabled: true
  service:
    type: *serviceType
    httpNodePort: "30220"

dremio-rest-server-operator:
  enabled: true

apigw-operator:
  enabled: true

jobs:
  delete:
    securityContext:
      readOnlyRootFilesystem: true

nakamasato-mysql-operator:
  enabled: false

mysql-operator:
  enabled: false

template-controller:
  enabled: true
  objectTemplate:
    enabled: true
  podSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

dashboard:
  replicaCount: 1
  image:
    repository: ghcr.io/scc-digitalhub/dh-dashboard
    pullPolicy: IfNotPresent
    tag: "0.1.3"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: "digitalhub-dashboard"
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 65532
    fsGroup: 65532
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
  securityContext:
    runAsUser: 65532
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  service:
    type: *serviceType
    port: "8080"
    httpNodePort: "30110"
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: ""
        paths:
          - pathType: ImplementationSpecific
            path: /
    tls:
    - secretName: ""
      hosts:
        - ""
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  volumes:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  oidc:
    enabled: false
    audience:
      clientId: ""
      externalSecret:
        name: ""
        key: ""
    config:
      issuer: ""
  additional-components:
    enabled: false
    apps:
      - name: ""
        description: ""
        service:
          name: ""
          port: ""
        ingress:
          enabled: false
          annotations: {}
          ingressClassName: ""
          hosts: []
          path: /
          tls: []
        redirectUrl: ""
        oidcIssuerUrl: ""
        existingSecret:
          name: ""
          clientId: ""
          secretKey: ""

solr-operator:
  enabled: true
  zookeeper-operator:
    crd:
      create: true
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

solr:
  enabled: true
  image:
    repository: "solr"
    tag: "9.7"
  replicas: 1
  fullnameOverride: *solrFullNameOverride
  # The following options are meant to be used when running solr with an unprivileged user.
  # If you want to use these options, be sure to also set core.solr.collection.initialize to true in this values file.
  # For more informations about what these options do, check the Solr official documentation.
  useExistingSecurityJson: false   # Set this to true if you already have a solr installation with a configured securityJson (creds settings won't affect your environment)
  solrOptions:
    security:
      authenticationType: Basic
      probesRequireAuth: true
      basicAuthSecret: digitalhub-solrcloud-basic-auth   # Specify the required basicAuth secret
      bootstrapSecurityJson:
        name: digitalhub-solrcloud-security-bootstrap   # Name of the secret with the configured security.json
        key: security.json   # Key in the secret corresponding to the security.json
  creds:
    # Solr requires cripted passwords in the format sha256(sha256(salt || password)).
    # You can either generate the encripted password yourself or using some online tools, but it must be specified alongside the not-encrypted password.
    # Be sure to double check if they match.
    admin:   # Do not remove this user, required by the operator
      password: "thi4iegheeX7euthe7di"   # Example random password
      passwordSha: "C8QrTZf6jpu+cPKTsLtyEhv1XVXAYZGmStTKXzB80sg= MW5pNXZlaGIyaWhkdW5w"   # Encrypted password
    k8sOper:   # Do not remove this user, required by the operator
      password: "imPBf@tU(asx9%TZ"
      passwordSha: "3iPc1JWet22a05UZXCFfo/qRUqwg2iVULyv5RBEqPdM= LSpnG/l2j8AA9vrryMGkkFLO+bYeN7ZUvrU270WAfyA="
    solr:   # Do not remove this user, required by the operator
      password: "aed0ohBie3hai6jo7sho"
      passwordSha: "i61TpZKyvff3CHnyZ0kMTzkNezkxkilCre93wLkz7jQ= NzlyN3k1cm0xZGt3eWR1MA=="
    user:   # Unprivileged user
      password: "soogh8aiy6vah6Aecai6"
      passwordSha: "ps9jK0qKXJqZawtFS+SxhB2CdCu90Qgz4riZ0XwzYd4= YWxxZXV3enB1YmE2c2gwdg=="
  dataStorage:
    # Either persistent or ephemeral
    type: "ephemeral"
    capacity: "10Gi"
    # Options for persistent storage. Only used if type = "persistent"
    persistent:
      reclaimPolicy: "Delete"
      pvc:
        name: ""
        labels: {}
        annotations: {}
        storageClassName: ""
  podOptions:
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
    containerSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL

minio:
  enabled: true
  rootUser: *minioRootUser
  rootPassword: *minioRootPassword
  mode: standalone
  replicas: 1
  ingress:
    enabled: false
  persistence:
    enabled: true
    size: 128Gi
  buckets:
    - name: datalake
      policy: none
      purge: false
    - name: argo
      policy: none
      purge: false
  resources:
    requests:
      memory: 0.5Gi
  service:
    type: *serviceType
    port: 9000
    nodePort: 30080
  consoleService:
    type: *serviceType
    port: 9001
    nodePort: 30090
  fullnameOverride: minio
  oidc:
    enabled: false
    configUrl: ""
    clientId: ""
    clientSecret: ""
    # Provide existing client secret from the Kubernetes Secret resource, existing secret will have priority over `clientId` and/or `clientSecret``
    existingClientSecretName: ""
    existingClientIdKey: ""
    existingClientSecretKey: ""
    claimName: ""
    scopes: ""
    redirectUri: ""
    # Can leave empty
    claimPrefix: ""
    comment: ""
    displayName: ""
  deploymentUpdate:
    type: Recreate
  users:
    - accessKey: *digitalhubUser
      secretKey: *digitalhubPassword
      policy: readwritedigitalhub
    - accessKey: *argoUser
      secretKey: *argoPassword
      policy: readwriteargo
  policies:
    - name: readwritedigitalhub
      statements:
        - effect: Allow
          resources:
            - 'arn:aws:s3:::datalake/*'
          actions:
            - "s3:*"
    - name: readwriteargo
      statements:
        - effect: Allow
          resources:
            - 'arn:aws:s3:::argo/*'
          actions:
            - "s3:*"
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
  containerSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
  postJob:
    securityContext:
      enabled: true
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
  makePolicyJob:
    securityContext:
      enabled: true
    containerSecurityContext:
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
  makeBucketJob:
    securityContext:
      enabled: true
    containerSecurityContext:
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
  makeUserJob:
    securityContext:
      enabled: true
    containerSecurityContext:
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL

minio-operator:
  enabled: true
  minio:
    accessKey: *minioRootUser
    secretKey: *minioRootPassword
    endpoint: *minioEndpoint
    endpointPort: *minioEndpointPort
    bucket: *minioBucket
    protocol: *minioProtocol

platformPackages:
  preRelease: false   ## Used for installing pre release packages
  deleteOnCompletion: true  ## Leave this to true if you want to delete the test projects created with helm test
  image: ""
  tag: ""
  packages:
  - name: "digitalhub[full]"
    tag: "0.10.1"
  - name: "digitalhub-runtime-python"
    tag: "0.10.1"
  - name: "digitalhub-runtime-container"
    tag: "0.10.1"
  - name: "digitalhub-runtime-dbt"
    tag: "0.10.1"
  - name: "digitalhub-runtime-kfp"
    tag: "0.10.1"
  - name: "digitalhub-runtime-modelserve"
    tag: "0.10.1"

argo-workflows:
  enabled: true
  singleNamespace: true
  workflow:
    serviceAccount:
      create: true
      name: argo-workflow
  controller:
    configMap:
      create: true
    serviceAccount:
      name: argo-workflow-controller
    workflowDefaults:
      spec:
        serviceAccountName: argo-workflow
    podSecurityContext:
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
  server:
    enabled: false
  artifactRepositoryRef:
    artifact-repositories:
      annotations:
        workflows.argoproj.io/default-artifact-repository: artifact-repository
      artifact-repository:
        archiveLogs: false
        s3:
          accessKeySecret:
            name: *argoSecret
            key: accesskey
          secretKeySecret:
            name: *argoSecret
            key: secretkey
          insecure: true
          bucket: *argoBucket
          endpoint: minio:9000
