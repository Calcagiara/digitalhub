global:
  cleanup:
    persistentVolumeClaims: false
    ingress: false
    pods: false
    jobs: false
  service:
    type: &serviceType "NodePort"
  registry:
    url: 192.168.49.2:30150
    username: ""
    password: ""
    email: ""
    secretName: ""
  basicAuth:
    enabled: false
    username: ""
    password: ""
    secretName: ""
  nuclio:
    dashboard:
      nodePort: 30050
  minio:
    rootUser: &minioRootUser minio
    rootPassword: &minioRootPassword minio123
  externalHostAddress: &globalExternalUrl "192.168.49.2"
  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

docker-registry:
  enabled: true
  fullnameOverride: digitalhub-docker-registry
  className: nginx
  service:
    type: *serviceType
    nodePort: 30150
  ingress:
    enabled: false
    path: /
    hosts:
      - registry.digitalhub.test
  persistence:
    accessMode: 'ReadWriteOnce'
    enabled: true
    size: 128Gi
  updateStrategy:
    type: Recreate

mlrun-ce:
  enabled: true
  nuclio:
    dashboard:
      kaniko:
        insecurePushRegistry: true
        insecurePullRegistry: true
  mlrun:
    ui:
      ingress:
        enabled: false
    db:
      enabled: true
    httpDB:
      dbType: "mysql"
      secretDsn:
        name: ""
        key: ""
    modelMonitoring:
      secretDsn:
        name: ""
  jupyterNotebook:
    enabled: false
  minio:
    enabled: false
    rootUser: *minioRootUser
    rootPassword: *minioRootPassword
    mode: standalone
    replicas: 1
    ingress:
      enabled: false
    persistence:
      enabled: true
      size: 128Gi
    buckets:
      - name: datalake
        policy: none
        purge: false
  pipelines:
    enabled: true
    name: pipelines
    persistence:
      enabled: true
      existingClaim:
      storageClass:
      accessMode: "ReadWriteOnce"
      size: "20Gi"
    db:
      username: root
    ui:
      ingress:
        enabled: false
    minio:
      enabled: true
      accessKey: *minioRootUser
      secretKey: *minioRootPassword
      endpoint: "minio"
      endpointPort: "9000"
      bucket: "datalake"
  kube-prometheus-stack:
    enabled: false

coder:
  enabled: true
  username: test
  password: Test12456@!
  email: test@digitalhub.test
  customCoderTemplates:
    - name: jupyter
      nodePort: "30040"
      iconUrl: https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/1200px-Jupyter_logo.svg.png
      image: "ghcr.io/scc-digitalhub/jupyter:1.6.2-rc6_0.4.0b2"
    - name: dremio
      nodePort: "30120"
      iconUrl: https://cdn.icon-icons.com/icons2/2699/PNG/512/dremio_logo_icon_168234.png
      image: "dremio/dremio-oss:24.1.0"
    - name: sqlpad
      nodePort: "30140"
      iconUrl: https://i.ibb.co/TrBDsZM/sqlpad.png
      image: "smartcommunitylab/sqlpad:nonroot"
    - name: grafana
      nodePort: "30130"
      iconUrl: https://cdn.icon-icons.com/icons2/2699/PNG/512/grafana_logo_icon_171048.png
      image: "smartcommunitylab/grafana"
  coder:
    image:
      tag: v2.6.0
    env:
      - name: CODER_PG_USERNAME
        valueFrom:
          secretKeyRef:
            name: coder.coder-postgres-cluster.credentials.postgresql.acid.zalan.do
            key: username
      - name: CODER_PG_PASSWORD
        valueFrom:
          secretKeyRef:
            name: coder.coder-postgres-cluster.credentials.postgresql.acid.zalan.do
            key: password
      - name: CODER_PG_CONNECTION_URL
        value: "postgres://$(CODER_PG_USERNAME):$(CODER_PG_PASSWORD)@coder-postgres-cluster:5432/coder"
    ingress:
      enable: false
    service:
      type: *serviceType
      httpNodePort: "30170"

postgres-operator:
  enabled: true
  databases:
    digitalhub:
      enabled: true
      volume:
        size: 8Gi
      resources:
        requests:
          cpu: 512m
          memory: 1000Mi
        limits:
          cpu: "2"
          memory: 2Gi
    core:
      enabled: true
      volume:
        size: 8Gi
      resources:
        requests:
          cpu: 512m
          memory: 1000Mi
        limits:
          cpu: "2"
          memory: 2Gi
    coder:
      enabled: true
      volume:
        size: 8Gi
      resources:
        requests:
          cpu: 512m
          memory: 1000Mi
        limits:
          cpu: "2"
          memory: 2Gi

ext-postgres-operator:
  enabled: true
  postgres:
    host: database-postgres-cluster
    user: ""
    password: ""
    uri_args: " "
    cloud_provider: ""
    default_database: "postgres"
  postgresCredsExistingSecrets:
    username:
      secretName: "digitalhubadmin.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "username"
    password:
      secretName: "digitalhubadmin.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "password"

postgrest-operator:
  enabled: true
  postgres:
    host: database-postgres-cluster
    port: 5432
    uri_args: "sslmode=disable"
    default_database: "digitalhub"
    postgrest_service_type: NodePort
  postgresCredsExistingSecrets:
    username:
      secretName: "digitalhub-owner-user.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "username"
    password:
      secretName: "digitalhub-owner-user.database-postgres-cluster.credentials.postgresql.acid.zalan.do"
      secretKey: "password"

core:
  enabled: true
  minio:
    bucketName: datalake
    endpoint: "minio"
    endpointPort: "9000"
  service:
    type: *serviceType
    httpNodePort: "30180"
  postgres:
    host: database-postgres-cluster
    database: digitalhub
    port: "5432"
    schema: public
  config:
    rootUser: minio
    rootPassword: minio123
  krm:
    port: "8080"
  kfp:
    endpoint: "http://ml-pipeline:8888"
  events:
    enabled: false
    rabbitmq:
      enabled: false
      host: "digitalhub-rabbitmq"
      port: "5672"
      vhost: "/"
      queue: "dhCoreQueue"
      topic: "entityTopic"
      routingKey: "entityRoutingKey"
      credentials:
        existingSecret:
          name: "digitalhub-rabbitmq-default-user"
          usernameKey: "username"
          passwordKey: "password"
    solr:
      enabled: true
      url: "http://dhcore-solrcloud-common"
      collection:
        name: "dhcore"
        initialize:
          enabled: true
          image: smartcommunitylab/k8s-ansible:1.30.0-1.7.0-nonroot

kubernetes-resource-manager:
  enabled: true
  service:
    type: *serviceType
    httpNodePort: "30220"

dremio-rest-server-operator:
  enabled: true

apigw-operator:
  enabled: true

grafana:
  enabled: true
  rbac:
    namespaced: true
  adminPassword: digitalhub-test
  service:
    type: NodePort
    nodePort: 30210
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Postgres
          type: postgres
          url: database-postgres-cluster:5432
          user: ${username}
          secureJsonData:
            password: ${password}
          jsonData:
            database: digitalhub
            sslmode: 'require'
            maxOpenConns: 100
            maxIdleConns: 100
            maxIdleConnsAuto: true
            connMaxLifetime: 14400
            postgresVersion: 1500
            timescaledb: false
  plugins:
    - https://github.com/scc-digitalhub/grafana-dremio-datasource-plugin/raw/master/releases/digital-hub-dremio-1.1.1.zip;digital-hub-dremio
  envFromSecret: digitalhub-reader-user.database-postgres-cluster.credentials.postgresql.acid.zalan.do
  env:
    GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "digital-hub-dremio"

jobs:
  delete:
    securityContext:
      readOnlyRootFilesystem: true

nakamasato-mysql-operator:
  enabled: false

mysql-operator:
  enabled: false

template-controller:
  enabled: true
  objectTemplate:
    enabled: true

oauth2-proxy:
  enabled: false
  apps:
    - name: ""
      service:
        name: ""
        port: ""
      ingress:
        enabled: false
        annotations: {}
        ingressClassName: ""
        hosts: []
        path: /
        tls: []
      redirectUrl: ""
      oidcIssuerUrl: ""
      existingSecret:
        name: ""
        clientId: ""
        secretKey: ""

dashboard:
  replicaCount: 1
  image:
    repository: smartcommunitylab/digitalhub-dashboard
    pullPolicy: IfNotPresent
    tag: "nonroot"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: "digitalhub-dashboard"
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 65532
    fsGroup: 65532
  securityContext:
    runAsUser: 65532
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  service:
    type: *serviceType
    port: "8080"
    httpNodePort: "30110"
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: ""
        paths:
          - pathType: ImplementationSpecific
            path: /
    tls:
    - secretName: ""
      hosts:
        - ""
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  volumes:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  oidc:
    enabled: false
    audience:
      clientId: ""
      externalSecret:
        name: ""
        key: ""
    config:
      issuer: ""

solr-operator:
  enabled: true
  zookeeper-operator:
    crd:
      create: true

solr:
  enabled: true
  replicas: 1

minio:
  enabled: true
  rootUser: *minioRootUser
  rootPassword: *minioRootPassword
  mode: standalone
  replicas: 1
  ingress:
    enabled: false
  persistence:
    enabled: true
    size: 128Gi
  buckets:
    - name: datalake
      policy: none
      purge: false
  resources:
    requests:
      memory: 0.5Gi
  service:
    type: *serviceType
    port: 9000
    nodePort: 30080
  consoleService:
    type: *serviceType
    port: 9001
    nodePort: 30090
  fullnameOverride: minio
