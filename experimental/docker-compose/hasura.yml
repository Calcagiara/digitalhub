services:
  # Postgres service with TimescaleDB and PostGIS
  postgres:
    image: timescale/timescaledb-ha:pg14.6-ts2.8.1-latest
    volumes:
        - ./resources/db-init-scripts/postgres-expose-virtualize.sql:/docker-entrypoint-initdb.d/postgres.sql
    ports:
      - 5432:5432
    command:
      - postgres
      - -c
      - timescaledb.telemetry_level=off
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  # Hasura service
  #moved here from expose_virtualize.yml to keep track of experiments with oauth2-proxy and nginx
  hasura:
    image: hasura/graphql-engine:v2.10.2.ubuntu
    #ports:
    #  - 4000:8080
    depends_on:
      - postgres
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/digitalhub
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      HASURA_GRAPHQL_ENABLE_TELEMETRY: false
      # Uncomment the following variable to require authentication
      #HASURA_GRAPHQL_JWT_SECRET: '{
      #  "jwk_url": "https://<aac_instance>/jwk",
      #  "issuer": "https://<aac_instance>",
      #  "audience": "hasura_client_id_in_aac"
      #}'
      #HASURA_GRAPHQL_ADMIN_SECRET: secret123 # Uncomment to require authentication
      
  # Hasura wrapped with OAuth2 Proxy
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
    #ports:
    #  - 4180:4180
    #depends_on:
    #  - hasura
    command:
      - --http-address
      - 0.0.0.0:4180
    environment:
      OAUTH2_PROXY_UPSTREAMS: "http://hasura:8080/"
    
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_PROVIDER: "oidc"
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: "AAC"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
      OAUTH2_PROXY_REDIRECT_URL: "http://localhost:1200/oauth2/callback"
      
      OAUTH2_PROXY_OIDC_ISSUER_URL: "https://<aac_instance>"
      OAUTH2_PROXY_CLIENT_ID: "client_id"
      OAUTH2_PROXY_CLIENT_SECRET: "client_secret"
      
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: true
      OAUTH2_PROXY_OIDC_EXTRA_AUDIENCES: api://default
      OAUTH2_PROXY_OIDC_EMAIL_CLAIM: "sub"
      
      OAUTH2_PROXY_SET_XAUTHREQUEST: true
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: true
      
      OAUTH2_PROXY_SESSION_STORE_TYPE: redis 
      OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://redis
      
      OAUTH2_PROXY_COOKIE_REFRESH: 30m
      OAUTH2_PROXY_COOKIE_NAME: "SESSION"
      OAUTH2_PROXY_COOKIE_SECRET: "secret1234567890"
      
  redis:
    image: redis:7.0.2-alpine3.16
    volumes:
      - cache:/data

  # Nginx
  nginx:
    image: nginx:1.22.1
    #depends_on:
    #  - oauth2-proxy
    volumes:
      - ./resources/nginx-default.conf.template:/etc/nginx/templates/default.conf.template
    ports:
      - 1200:80

volumes:
  cache:
    driver: local

# Docs

# To require authentication, open the *.yml* file and uncomment `HASURA_GRAPHQL_ADMIN_SECRET`. Its value will be asked when accessing the UI, but can also be used when executing queries from tools like curl or Postman, by adding the header `x-hasura-admin-secret: <HASURA_GRAPHQL_ADMIN_SECRET>`.

# To use AAC, create a web client, enable *client-secret-basic* as authentication method and *client_credentials* as grant type. Add a custom claim mapping for the *admin* role:
# ```
# function claimMapping(claims) {
#     hasura_claims = {};
#     hasura_claims["x-hasura-default-role"] = "admin";
#     hasura_claims["x-hasura-allowed-roles"] = ["admin"];
#     claims["https://hasura.io/jwt/claims"] = hasura_claims;
#     return claims;
# }
# ```
# Save the client, open the *.yml* file, uncomment `HASURA_GRAPHQL_JWT_SECRET` and, within, specify the AAC instance and update `audience` with the client's ID. Start a Hasura container (you may need to track tables and functions again).

# Obtain a token and then try the following curl command, which will query the custom function:
# ```
# curl --location --request POST 'http://localhost:4000/v1/graphql' \
# --header 'Authorization: Bearer <your_client_credentials_token>' \
# --data-raw '{"query":"query MyQuery {test_scenario_find_cities_in(args: {area:\"1.85 49.13, 2.96 49.11, 2.92 48.43, 1.82 48.53, 1.85 49.13\"}) {country name}}"}'
# ```

# Note that, even if you plan on using AAC, `HASURA_GRAPHQL_ADMIN_SECRET` still needs to be uncommented.